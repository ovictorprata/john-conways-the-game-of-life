{"ast":null,"code":"// Imports\nimport Vue from \"vue\";\nimport Controller from \"@/components/ControllerGame.vue\";\nimport Grid from \"@/components/GridBoard.vue\";\nimport NavBar from \"@/components/NavBar.vue\";\nexport default {\n  name: \"App\",\n  components: {\n    \"app-grid\": Grid,\n    \"app-controller\": Controller,\n    \"navbar-app\": NavBar\n  },\n  data() {\n    return {\n      // The message that gets send down to app-grid at a steady interval\n      message: \"\",\n      // Booleans to determine what to show to the client\n      isRunning: false,\n      // Used to determine the speed the application runs at\n      speed: 100,\n      intervalID: 0,\n      // Variables to determine which page/scenario to show\n      mainComponent: \"gamePage\",\n      selectedScenario: \"scenario\"\n    };\n  },\n  created() {},\n  methods: {\n    /**\n     * Gets called whenever a button is pressed\n     * from the Controller component and delegates the\n     * appropriate action based on param.\n     *\n     * @param {string} event - the event\n     */\n    delegate: function (event) {\n      if (event === \"play\") {\n        this.isRunning = !this.isRunning;\n        this.restartInterval();\n      } else {\n        this.updateMessage(event);\n      }\n    },\n    /**\n     * Updates  message  that gets passed\n     * down to the grid component as a prop and\n     * then resets the message on the next tick.\n     *\n     * @param {string} newMessage - the new message to be set\n     */\n    updateMessage: function (newMessage) {\n      this.message = newMessage;\n      Vue.nextTick(this.resetMessage);\n    },\n    /**\n     * Resets the current message to an\n     * empty string.\n     */\n    resetMessage: function () {\n      this.message = \"\";\n    },\n    /**\n     * Restarts the current interval that\n     * is used to call the updateMessage method.\n     */\n    restartInterval: function () {\n      clearInterval(this.intervalID);\n      if (this.isRunning) {\n        this.intervalID = setInterval(this.updateMessage, 50000 / this.speed, \"nextStep\");\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AAyCA;AACA;AACA;AACA;AACA;AACA;EACAA;EACAC;IACA;IACA;IACA;EACA;EACAC;IACA;MACA;MACAC;MACA;MACAC;MACA;MACAC;MACAC;MACA;MACAC;MACAC;IACA;EACA;EACAC;EACAC;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA;QACA;QACA;MACA;QACA;MACA;IACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;IACAC;MACA;MACAC;IACA;IACA;AACA;AACA;AACA;IACAC;MACA;IACA;IACA;AACA;AACA;AACA;IACAC;MACAC;MACA;QACA,8BACA,oBACA,oBACA,WACA;MACA;IACA;EACA;AACA","names":["name","components","data","message","isRunning","speed","intervalID","mainComponent","selectedScenario","created","methods","delegate","updateMessage","Vue","resetMessage","restartInterval","clearInterval"],"sourceRoot":"src/views","sources":["HomeView.vue"],"sourcesContent":["<template>\n  <div class=\"GOL\">\n    <navbar-app />\n    <section class=\"hero primary-background is-fullheight\">\n      <!-- Main Content -->\n      <div class=\"main-content-app\">\n        <div class=\"container is-paddingless\">\n          <div class=\"columns box is-fullwidth is-gapless\">\n            <div class=\"column is-12\">\n              <transition mode=\"out-in\" name=\"fade\">\n                <keep-alive>\n                  <app-grid\n                    v-if=\"mainComponent == 'gamePage'\"\n                    :message=\"message\"\n                    :current-speed=\"speed\"\n                  />\n                </keep-alive>\n              </transition>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- Footer -->\n      <footer class=\"footer\">\n        <div class=\"container\">\n          <div class=\"columns\">\n            <div class=\"column is-half is-offset-one-quarter\">\n              <app-controller\n                :is-running=\"isRunning\"\n                :main-component=\"mainComponent\"\n                @send=\"delegate($event)\"\n              />\n            </div>\n          </div>\n        </div>\n      </footer>\n    </section>\n  </div>\n</template>\n\n<script>\n// Imports\nimport Vue from \"vue\";\nimport Controller from \"@/components/ControllerGame.vue\";\nimport Grid from \"@/components/GridBoard.vue\";\nimport NavBar from \"@/components/NavBar.vue\";\nexport default {\n  name: \"App\",\n  components: {\n    \"app-grid\": Grid,\n    \"app-controller\": Controller,\n    \"navbar-app\": NavBar,\n  },\n  data() {\n    return {\n      // The message that gets send down to app-grid at a steady interval\n      message: \"\",\n      // Booleans to determine what to show to the client\n      isRunning: false,\n      // Used to determine the speed the application runs at\n      speed: 100,\n      intervalID: 0,\n      // Variables to determine which page/scenario to show\n      mainComponent: \"gamePage\",\n      selectedScenario: \"scenario\",\n    };\n  },\n  created() {},\n  methods: {\n    /**\n     * Gets called whenever a button is pressed\n     * from the Controller component and delegates the\n     * appropriate action based on param.\n     *\n     * @param {string} event - the event\n     */\n    delegate: function (event) {\n      if (event === \"play\") {\n        this.isRunning = !this.isRunning;\n        this.restartInterval();\n      } else {\n        this.updateMessage(event);\n      }\n    },\n    /**\n     * Updates  message  that gets passed\n     * down to the grid component as a prop and\n     * then resets the message on the next tick.\n     *\n     * @param {string} newMessage - the new message to be set\n     */\n    updateMessage: function (newMessage) {\n      this.message = newMessage;\n      Vue.nextTick(this.resetMessage);\n    },\n    /**\n     * Resets the current message to an\n     * empty string.\n     */\n    resetMessage: function () {\n      this.message = \"\";\n    },\n    /**\n     * Restarts the current interval that\n     * is used to call the updateMessage method.\n     */\n    restartInterval: function () {\n      clearInterval(this.intervalID);\n      if (this.isRunning) {\n        this.intervalID = setInterval(\n          this.updateMessage,\n          50000 / this.speed,\n          \"nextStep\"\n        );\n      }\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\">\nhtml,\nbody {\n  background-image: linear-gradient(\n    to right top,\n    #ff0000,\n    #db0000,\n    #840000,\n    #620000\n  );\n  color: #000;\n  font-family: \"Dosis\", Helvetica, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  margin: 0px;\n}\n#app {\n  font-family: \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #fff;\n}\n.main-content-app {\n  align-items: stretch !important;\n  padding-top: 18px;\n  padding-bottom: 12px;\n}\n.footer {\n  padding: 1rem;\n  background-color: transparent;\n}\n.hr {\n  position: relative;\n  border-top: 2px solid #414b5c;\n  margin: 0px;\n  bottom: 0;\n}\n// The transitions used to switch out my page components as well as\n// the import/export modal\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.35s linear;\n}\n.fade-enter,\n.fade-leave-active {\n  opacity: 0;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}